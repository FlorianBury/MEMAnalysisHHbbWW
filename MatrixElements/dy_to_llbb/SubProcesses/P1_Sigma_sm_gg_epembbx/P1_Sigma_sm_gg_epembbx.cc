// 
// *  This file was automatically generated by MoMEMta-MaGMEE,
// *  A MadGraph Matrix Element Exporter plugin for MoMEMta.
// *
// *  It is subject to MoMEMta-MaGMEE's license and copyright:
// *
// *  Copyright (C) 2016  Universite catholique de Louvain (UCL), Belgium
// *
// *  This program is free software: you can redistribute it and/or modify
// *  it under the terms of the GNU General Public License as published by
// *  the Free Software Foundation, either version 3 of the License, or
// *  (at your option) any later version.
// *
// *  This program is distributed in the hope that it will be useful,
// *  but WITHOUT ANY WARRANTY; without even the implied warranty of
// *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// *  GNU General Public License for more details.
// *
// *  You should have received a copy of the GNU General Public License
// *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 

#include <string> 
#include <utility> 
#include <vector> 
#include <map> 

#include <P1_Sigma_sm_gg_epembbx.h> 
#include <HelAmps_sm.h> 

#include <momemta/ParameterSet.h> 
#include <momemta/SLHAReader.h> 

namespace dy_to_llbb_sm 
{

//==========================================================================
// Class member functions for calculating the matrix elements for
// Process: g g > e+ e- b b~ WEIGHTED<=6 @1
// Process: u u~ > e+ e- b b~ WEIGHTED<=6 @1
// Process: c c~ > e+ e- b b~ WEIGHTED<=6 @1
// Process: d d~ > e+ e- b b~ WEIGHTED<=6 @1
// Process: s s~ > e+ e- b b~ WEIGHTED<=6 @1

//--------------------------------------------------------------------------

// Initialize process.

P1_Sigma_sm_gg_epembbx::P1_Sigma_sm_gg_epembbx(const ParameterSet&
    configuration)
{

  std::string param_card = configuration.get < std::string > ("card"); 
  params.reset(new Parameters_sm(SLHA::Reader(param_card))); 

  // Set external particle masses for this matrix element
  mME.push_back(std::ref(params->ZERO)); 
  mME.push_back(std::ref(params->ZERO)); 
  mME.push_back(std::ref(params->ZERO)); 
  mME.push_back(std::ref(params->ZERO)); 
  mME.push_back(std::ref(params->mdl_MB)); 
  mME.push_back(std::ref(params->mdl_MB)); 

  mapFinalStates[{-11, 11, 5, -5}] = 
  {
    {
      &P1_Sigma_sm_gg_epembbx::matrix_1_gg_epembbx, 
      false, 
      {
        std::make_pair(21, 21)
      }, 
      64, 
      256
    }
    , 
    {
      &P1_Sigma_sm_gg_epembbx::matrix_1_uux_epembbx, 
      true, 
      {
        std::make_pair(2, -2), std::make_pair(4, -4)
      }, 
      64, 
      36
    }
    , 
    {
      &P1_Sigma_sm_gg_epembbx::matrix_1_ddx_epembbx, 
      true, 
      {
        std::make_pair(1, -1), std::make_pair(3, -3)
      }, 
      64, 
      36
    }
  }; 

}

void P1_Sigma_sm_gg_epembbx::resetHelicities() 
{
  for (auto& finalState: mapFinalStates)
  {
    for (auto& subProcess: finalState.second)
    {
      subProcess.resetHelicities(); 
    }
  }
}


//--------------------------------------------------------------------------
// Evaluate |M|^2, return a map of final states

std::map < std::pair < int, int > , double >
    P1_Sigma_sm_gg_epembbx::compute(const std::pair < std::vector<double> ,
    std::vector<double> > &initialMomenta, const std::vector < std::pair < int,
    std::vector<double> > > &finalState)
{

  // Set initial particle momenta
  momenta[0] = (double * ) (&initialMomenta.first[0]); 
  momenta[1] = (double * ) (&initialMomenta.second[0]); 

  // Suppose final particles are passed in the "correct" order
  std::vector<int> selectedFinalState(6 - 2); 
  for (size_t index = 0; index < (6 - 2); index++ )
  {
    selectedFinalState[index] = finalState[index].first; 
    momenta[index + 2] = (double * ) (&finalState[index].second[0]); 
  }

  // Set the event specific parameters
  params->updateParameters(); 
  params->updateCouplings(); 

  // Initialise result object
  std::map < std::pair < int, int > , double > result; 

  // Define permutation
  int perm[6]; 
  for(int i = 0; i < 6; i++ )
  {
    perm[i] = i; 
  }

  for(auto &me: mapFinalStates[selectedFinalState])
  {

    double me_sum = 0; 
    double me_mirror_sum = 0; 

    for(int ihel = 0; ihel < 64; ihel++ )
    {

      if(me.goodHel[ihel])
      {

        double sum = 0.; 
        calculate_wavefunctions(perm, helicities[ihel]); 
        double meTemp = me.callback( * this); 
        sum += meTemp; 
        me_sum += meTemp/me.denominator; 

        if(me.hasMirrorProcess)
        {
          perm[0] = 1; 
          perm[1] = 0; 
          // Calculate wavefunctions
          calculate_wavefunctions(perm, helicities[ihel]); 
          // Mirror back
          perm[0] = 0; 
          perm[1] = 1; 
          meTemp = me.callback( * this); 
          sum += meTemp; 
          me_mirror_sum += meTemp/me.denominator; 
        }

        if( !sum)
          me.goodHel[ihel] = false; 
      }
    }

    for (auto const &initialState: me.initialStates)
    {
      result[initialState] = me_sum; 
      if (me.hasMirrorProcess)
        result[std::make_pair(initialState.second, initialState.first)] =
            me_mirror_sum;
    }
  }


  return result; 
}

//==========================================================================
// Private class member functions

//--------------------------------------------------------------------------
// Evaluate |M|^2 for each subprocess

void P1_Sigma_sm_gg_epembbx::calculate_wavefunctions(const int perm[], const
    int hel[])
{
  // Calculate wavefunctions for all processes
  static std::complex<double> w[30][18]; 

  // Calculate all wavefunctions
  vxxxxx(&momenta[perm[0]][0], mME[0], hel[0], -1, w[0]); 
  vxxxxx(&momenta[perm[1]][0], mME[1], hel[1], -1, w[1]); 
  ixxxxx(&momenta[perm[2]][0], mME[2], hel[2], -1, w[2]); 
  oxxxxx(&momenta[perm[3]][0], mME[3], hel[3], +1, w[3]); 
  oxxxxx(&momenta[perm[4]][0], mME[4], hel[4], +1, w[4]); 
  ixxxxx(&momenta[perm[5]][0], mME[5], hel[5], -1, w[5]); 
  VVV1P0_1(w[0], w[1], params->GC_10, params->ZERO, params->ZERO, w[6]); 
  FFV1P0_3(w[2], w[3], params->GC_3, params->ZERO, params->ZERO, w[7]); 
  FFV1_1(w[4], w[6], params->GC_11, params->mdl_MB, params->ZERO, w[8]); 
  FFV1_2(w[5], w[6], params->GC_11, params->mdl_MB, params->ZERO, w[9]); 
  FFV2_4_3(w[2], w[3], params->GC_50, params->GC_59, params->mdl_MZ,
      params->mdl_WZ, w[10]);
  FFV1_1(w[4], w[0], params->GC_11, params->mdl_MB, params->ZERO, w[11]); 
  FFV1_2(w[5], w[1], params->GC_11, params->mdl_MB, params->ZERO, w[12]); 
  FFV1_1(w[11], w[1], params->GC_11, params->mdl_MB, params->ZERO, w[13]); 
  FFV1_2(w[5], w[0], params->GC_11, params->mdl_MB, params->ZERO, w[14]); 
  FFV1_1(w[4], w[1], params->GC_11, params->mdl_MB, params->ZERO, w[15]); 
  FFV1_2(w[14], w[1], params->GC_11, params->mdl_MB, params->ZERO, w[16]); 
  FFV1_1(w[15], w[0], params->GC_11, params->mdl_MB, params->ZERO, w[17]); 
  FFV1_2(w[12], w[0], params->GC_11, params->mdl_MB, params->ZERO, w[18]); 
  ixxxxx(&momenta[perm[0]][0], mME[0], hel[0], +1, w[19]); 
  oxxxxx(&momenta[perm[1]][0], mME[1], hel[1], -1, w[20]); 
  FFV1P0_3(w[19], w[20], params->GC_11, params->ZERO, params->ZERO, w[21]); 
  FFV1_1(w[4], w[21], params->GC_11, params->mdl_MB, params->ZERO, w[22]); 
  FFV1_2(w[5], w[21], params->GC_11, params->mdl_MB, params->ZERO, w[23]); 
  FFV1P0_3(w[5], w[4], params->GC_11, params->ZERO, params->ZERO, w[24]); 
  FFV1_2(w[19], w[7], params->GC_2, params->ZERO, params->ZERO, w[25]); 
  FFV1_2(w[19], w[24], params->GC_11, params->ZERO, params->ZERO, w[26]); 
  FFV2_5_2(w[19], w[10], -params->GC_50, params->GC_58, params->ZERO,
      params->ZERO, w[27]);
  FFV1_2(w[19], w[7], params->GC_1, params->ZERO, params->ZERO, w[28]); 
  FFV2_3_2(w[19], w[10], params->GC_50, params->GC_58, params->ZERO,
      params->ZERO, w[29]);

  // Calculate all amplitudes
  // Amplitude(s) for diagram number 0
  FFV1_0(w[5], w[8], w[7], params->GC_1, amp[0]); 
  FFV1_0(w[9], w[4], w[7], params->GC_1, amp[1]); 
  FFV2_3_0(w[5], w[8], w[10], params->GC_50, params->GC_58, amp[2]); 
  FFV2_3_0(w[9], w[4], w[10], params->GC_50, params->GC_58, amp[3]); 
  FFV1_0(w[12], w[11], w[7], params->GC_1, amp[4]); 
  FFV2_3_0(w[12], w[11], w[10], params->GC_50, params->GC_58, amp[5]); 
  FFV1_0(w[5], w[13], w[7], params->GC_1, amp[6]); 
  FFV2_3_0(w[5], w[13], w[10], params->GC_50, params->GC_58, amp[7]); 
  FFV1_0(w[14], w[15], w[7], params->GC_1, amp[8]); 
  FFV2_3_0(w[14], w[15], w[10], params->GC_50, params->GC_58, amp[9]); 
  FFV1_0(w[16], w[4], w[7], params->GC_1, amp[10]); 
  FFV2_3_0(w[16], w[4], w[10], params->GC_50, params->GC_58, amp[11]); 
  FFV1_0(w[5], w[17], w[7], params->GC_1, amp[12]); 
  FFV2_3_0(w[5], w[17], w[10], params->GC_50, params->GC_58, amp[13]); 
  FFV1_0(w[18], w[4], w[7], params->GC_1, amp[14]); 
  FFV2_3_0(w[18], w[4], w[10], params->GC_50, params->GC_58, amp[15]); 
  FFV1_0(w[5], w[22], w[7], params->GC_1, amp[16]); 
  FFV1_0(w[23], w[4], w[7], params->GC_1, amp[17]); 
  FFV2_3_0(w[5], w[22], w[10], params->GC_50, params->GC_58, amp[18]); 
  FFV2_3_0(w[23], w[4], w[10], params->GC_50, params->GC_58, amp[19]); 
  FFV1_0(w[25], w[20], w[24], params->GC_11, amp[20]); 
  FFV1_0(w[26], w[20], w[7], params->GC_2, amp[21]); 
  FFV1_0(w[27], w[20], w[24], params->GC_11, amp[22]); 
  FFV2_5_0(w[26], w[20], w[10], -params->GC_50, params->GC_58, amp[23]); 
  FFV1_0(w[5], w[22], w[7], params->GC_1, amp[24]); 
  FFV1_0(w[23], w[4], w[7], params->GC_1, amp[25]); 
  FFV2_3_0(w[5], w[22], w[10], params->GC_50, params->GC_58, amp[26]); 
  FFV2_3_0(w[23], w[4], w[10], params->GC_50, params->GC_58, amp[27]); 
  FFV1_0(w[28], w[20], w[24], params->GC_11, amp[28]); 
  FFV1_0(w[26], w[20], w[7], params->GC_1, amp[29]); 
  FFV1_0(w[29], w[20], w[24], params->GC_11, amp[30]); 
  FFV2_3_0(w[26], w[20], w[10], params->GC_50, params->GC_58, amp[31]); 

}
double P1_Sigma_sm_gg_epembbx::matrix_1_gg_epembbx() 
{

  static std::complex<double> ztemp; 
  static std::complex<double> jamp[2]; 
  // The color matrix
  static const double denom[2] = {3, 3}; 
  static const double cf[2][2] = {{16, -2}, {-2, 16}}; 

  // Calculate color flows
  static const std::complex<double> cI(0., 1.); 
  jamp[0] = +cI * amp[0] + cI * amp[1] + cI * amp[2] + cI * amp[3] - amp[4] -
      amp[5] - amp[6] - amp[7] - amp[14] - amp[15];
  jamp[1] = -cI * amp[0] - cI * amp[1] - cI * amp[2] - cI * amp[3] - amp[8] -
      amp[9] - amp[10] - amp[11] - amp[12] - amp[13];

  // Sum and square the color flows to get the matrix element
  double matrix = 0; 
  for(int i = 0; i < 2; i++ )
  {
    ztemp = 0.; 
    for(int j = 0; j < 2; j++ )
      ztemp = ztemp + cf[i][j] * jamp[j]; 
    matrix = matrix + real(ztemp * conj(jamp[i]))/denom[i]; 
  }

  return matrix; 
}

double P1_Sigma_sm_gg_epembbx::matrix_1_uux_epembbx() 
{

  static std::complex<double> ztemp; 
  static std::complex<double> jamp[2]; 
  // The color matrix
  static const double denom[2] = {1, 1}; 
  static const double cf[2][2] = {{9, 3}, {3, 9}}; 

  // Calculate color flows
  jamp[0] = +1./2. * (+1./3. * amp[16] + 1./3. * amp[17] + 1./3. * amp[18] +
      1./3. * amp[19] + 1./3. * amp[20] + 1./3. * amp[21] + 1./3. * amp[22] +
      1./3. * amp[23]);
  jamp[1] = +1./2. * (-amp[16] - amp[17] - amp[18] - amp[19] - amp[20] -
      amp[21] - amp[22] - amp[23]);

  // Sum and square the color flows to get the matrix element
  double matrix = 0; 
  for(int i = 0; i < 2; i++ )
  {
    ztemp = 0.; 
    for(int j = 0; j < 2; j++ )
      ztemp = ztemp + cf[i][j] * jamp[j]; 
    matrix = matrix + real(ztemp * conj(jamp[i]))/denom[i]; 
  }

  return matrix; 
}

double P1_Sigma_sm_gg_epembbx::matrix_1_ddx_epembbx() 
{

  static std::complex<double> ztemp; 
  static std::complex<double> jamp[2]; 
  // The color matrix
  static const double denom[2] = {1, 1}; 
  static const double cf[2][2] = {{9, 3}, {3, 9}}; 

  // Calculate color flows
  jamp[0] = +1./2. * (+1./3. * amp[24] + 1./3. * amp[25] + 1./3. * amp[26] +
      1./3. * amp[27] + 1./3. * amp[28] + 1./3. * amp[29] + 1./3. * amp[30] +
      1./3. * amp[31]);
  jamp[1] = +1./2. * (-amp[24] - amp[25] - amp[26] - amp[27] - amp[28] -
      amp[29] - amp[30] - amp[31]);

  // Sum and square the color flows to get the matrix element
  double matrix = 0; 
  for(int i = 0; i < 2; i++ )
  {
    ztemp = 0.; 
    for(int j = 0; j < 2; j++ )
      ztemp = ztemp + cf[i][j] * jamp[j]; 
    matrix = matrix + real(ztemp * conj(jamp[i]))/denom[i]; 
  }

  return matrix; 
}



}

// Register matrix element with MoMEMta
#include <momemta/MatrixElementFactory.h> 
REGISTER_MATRIX_ELEMENT("dy_to_llbb_sm_P1_Sigma_sm_gg_epembbx",
    dy_to_llbb_sm::P1_Sigma_sm_gg_epembbx);

